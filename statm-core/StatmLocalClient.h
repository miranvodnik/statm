/*
 * StatmLocalClient.h
 *
 *  Created on: 30. okt. 2015
 *      Author: miran
 */

#pragma once

#include <sys/mman.h>
#include "StatmRunningContext.h"
#include "StatmRunnable.h"
#include "StatmWorkingClient.h"
#include "StatmClientHandler.h"
#include "StatmMessages.h"
#include "StatmCommon.h"
#include <set>
using namespace std;

namespace statm_daemon
{

/*! @brief UNIX domain client class
 *
 *  this class represents communication channel between local
 *  UNIX domain client and XML DB server
 *
 */
class	StatmLocalClient : public StatmWorkingClient
{
public:
	StatmLocalClient(StatmRunningContext* ctx, int fd, StatmRunnable* mainThread);
	virtual ~StatmLocalClient();

private:
	fd_handler(HandleLocalClient, StatmLocalClient)	//!< local client I/O handler

	void Release ();
	void PostSqlErrorResponse (StatErrorType errorType, StatErrorCode errorCode, const char* errorMessage);

	void DisplayStatRequest (StatRequest* req);
	void DisplayStatReply (StatReply* rpl);

private:
	static const char*	g_errorString[];	//!< error strings
	static int g_reqIndex;	//!< request index

private:
	StatmRunningContext*	m_ctx;	//!< I/O multiplexer governing this client

	bool	m_connected;	//!< SQL connected?
	int	m_fd;

	void*	m_localHandler;	//!< I/O handler reference

	int	m_intSize;	//!< size of XDR integer representation

	u_char*	m_inputBuffer;	//!< input buffer holding incoming requests
	u_char*	m_inputPtr;	//!< input buffer read head
	u_char*	m_inputEnd;	//!< input buffer far end

	u_char*	m_outputBuffer;	//!< output buffer holding outgoing replies
	u_char*	m_outputPtr;	//!< output buffer write head
	u_char*	m_outputEnd;	//!< output buffer far end

	StatError*	m_errorList;	//!< list of error messages generated by executing SQL statement
};

/*! brief local client activation message
 *
 *  this class represents local client 'activation' message generated
 *  by main thread of working entity. This message is sent to selected
 *  client driver thread. After this message has been processed by that
 *  thread client has become 'activated': newly created StatmLocalClient
 *  is associated with it and I/O handler is registered with I/O multiplexer
 *  residing in selected client driver thread.
 *
 */
class StatmLocalClientActivationMessage : public StatmRunningContextMsg
{
public:
	/*! @brief UNIX domain client activation message constructor
	 *
	 *  @param localClientFd FD obtained by calling accept() system call in main worker thread
	 *  @param clientDriver reference to current client driver thread
	 *
	 */
	StatmLocalClientActivationMessage (int localClientFd, void* clientDriver) : StatmRunningContextMsg () { m_localClientFd = localClientFd; m_clientDriver = clientDriver; }
	/*! @brief UNIX domain client activation message destructor
	 *
	 */
	virtual ~StatmLocalClientActivationMessage () {}
	virtual int	Invoke (StatmRunningContext* ctx);
	/*! @brief obtain this class name
	 *
	 */
	virtual const char* Name () { return "StatmLocalClientActivationMessage"; }
private:
	int	m_localClientFd;	//!< UNIX domain socket FD associated with activated client
	void*	m_clientDriver;	//!< client driver thread governing client communication
};

/*! @brief UNIX domain client response message
 *
 *  all client response messages are actually created by working threads processing
 *  SQL jobs. Since these threads does not know how to communicate these responses,
 *  they are sent to client driver threads associated with these clients which then
 *  process them. This class represents messages sent from working to client driver
 *  threads.
 *
 */
class StatmLocalClientResponseMessage : public StatmRunningContextMsg
{
public:
	/*! @brief UNIX domain client response message constructor
	 *
	 *  @param localClient object representing UNIX domain client
	 *  @param data general reference of message generated by working thread
	 *  @param clientDriver client driver thread governing client communication
	 *
	 */
	StatmLocalClientResponseMessage (StatmLocalClient* localClient, void* data, void* clientDriver) : StatmRunningContextMsg () { m_localClient = localClient; m_data = data; m_clientDriver = clientDriver; }
	/*! @brief UNIX domain client response message destructor
	 *
	 */
	virtual ~StatmLocalClientResponseMessage () {}
	virtual int	Invoke (StatmRunningContext* ctx);
	/*! @brief obtain this class name
	 *
	 */
	virtual const char* Name () { return "StatmLocalClientResponseMessage"; }
private:
	StatmLocalClient*	m_localClient;	//!< UNIX domain client object reference
	void*	m_data;	//!< general reference of message generated by working thread
	void*	m_clientDriver;	//!< client driver thread governing client communication
};

} /* namespace statm_daemon */
